import { TabsData } from "components/Tabs";
import { useMemo } from "react";
import { MenuTreeItem, PageData, useWPNav, useWPUri, WPUriType } from "./useWP";

/* 

# The expected structure of the WP

Need to have a menu set up with the following structure

Protocol - with a uri of `/protocol/<protocol name here>`
    - routes to /campaigns/:protocolID
    - CampaignList.tsx
  Amplifi Campaign - with a uri of `/amplifi_campaigns/<campaign name here>` and __typename of AmpliFiCampaign
      - routes to /campaigns/:protocolID/:campaignID
      - an amplifi campaign will display nodes of typename Page that it is a parent to
      - by default it will show the first page
      - CampaignDetails.tsx
    Page - with a uri of `/<page name here>` and __typename of Page
        - routes to /campaigns/:protocolID/:campaignID/:tabID
        - This way, you can link directly to a tab
        - CampaignDetails.tsx

Design Pattern
  - useCampaign will output information based on the information that it has from the input, if an input is not defined, the output that uses those inputs will have a falsey value
  - Route refers to this apps routing while uri refers to the uri generated by WP

todo(jono) - where is the kpi link going?

*/

/**
 * filters posts that level 1 children based on protocolID to get the amplifiCampaigns for that protocol
 * @param protocolID 
 * @param posts 
 * @returns 
 */
const getAmplifiCampaigns = (protocolID: string, posts?: PageData[]) => {
  if (!posts || !protocolID) {
    return null;
  }
  return posts.filter((p: any) => {
    const protocol = posts.filter(
      (q: any) => q.label.toLowerCase() == protocolID.toLowerCase()
    )[0];
    if (!protocol) return;
    return p.__typename == "AmpliFiCampaign" && p.parentId == protocol.id;
  });
};

/**
 * some wp uris have the uri as `/protocol/Cre8r`. This function is used to filter the nav from the wpgraphql Menu query
 * @param protocolID 
 * @returns 
 */
const protocolIDToUri = (protocolID: string) => {
  return "/protocol/" + protocolID.replaceAll("/", "") + "/";
};

/**
 * filters by posts that have a parent of the campaign that matches the campaignUri and returns data that is intended to be used with the MuiTabs
 * @param protocolID 
 * @param campaignUri 
 * @param posts 
 * @returns 
 */
const getAmplifiCampaignTabsData = (
  protocolID: string,
  campaignUri: string,
  posts?: PageData[]
) => {
  if (!posts) {
    return [];
  }
  return [
    // { tab: "overview", content: "", uri: campaignUri },
    ...posts
      .filter((p: any) => {
        const selectedCampaign = posts.filter(
          (q: any) => q.uri == campaignUri
        )[0];
        if (!selectedCampaign) return false;
        return p.__typename == "Page" && p.parentId == selectedCampaign.id;
      })
      .map((p) => {
        return {
          tab: p.label || "no label",
          content: "",
          uri: p.uri,
        };
      }),
  ];
};

/**
 * Using the WP nodeByUri query, this gets the html to be displayed on the CampaignDetails.tsx page
 * @param uriRes 
 * @returns 
 */
const getDisplayData = (uriRes: WPUriType) => {
  if (uriRes && !uriRes.loading && uriRes.data && uriRes.data.nodeByUri) {
    return {
      content: uriRes.data.nodeByUri.content || "No content",
      title: uriRes.data.nodeByUri.title || "",
      loading: false,
      error: "",
    };
  } else if (!uriRes) {
    return {
      content: "",
      title: "",
      loading: true,
      error: "",
    };
  }
  return {
    content: "",
    title: "",
    loading: false,
    error: uriRes.errors,
  };
};
type Route = string;
export interface UriToRouteMap {
  [uri: string]: Route;
}

/**
 * uri to route converter
 * @param protocolID 
 * @param nav 
 * @returns 
 */
const generateWpUriToRouteMap = (protocolID: string, nav?: MenuTreeItem[]) => {
  if (!nav || nav.length === 0) {
    return {};
  }
  const map: UriToRouteMap = {};
  const protocolNav = nav.filter(
    (n) => n.uri.toLowerCase() == protocolIDToUri(protocolID).toLowerCase()
  )[0];
  if (!protocolNav) {
    console.error(`Unable to find ${protocolID} in Nav data`);
    return {};
  }
  const subNav = nav.filter(
    (n) => n.uri.toLowerCase() == protocolIDToUri(protocolID).toLowerCase()
  )[0];
  subNav.children.forEach((n) => {
    n.uri.includes(protocolIDToUri(protocolID));
    n.uri.includes("/amplifi_campaigns/");
    n.parentId == protocolNav.id;
    if (n.uri.includes("/amplifi_campaigns/") && n.parentId == protocolNav.id) {
      const route = `/campaigns/${protocolID}/${n.uri
        .replace("/amplifi_campaigns/", "")
        .replaceAll("/", "")}`;
      map[n.uri] = route;
      n.children.forEach((t) => {
        //tabs in col3
        map[t.uri] = `${route}/${t.uri.replaceAll("/", "")}`;
      });
    }
  });
  return map;
};

/**
 * route to uri converter
 * @param protocolID 
 * @param nav 
 * @returns 
 */
const generateRouteToWpUriMap = (protocolID: string, nav?: MenuTreeItem[]) => {
  const map = generateWpUriToRouteMap(protocolID, nav);
  const keys = Object.keys(map);
  const values = Object.values(map);
  const invertedMap: any = {};
  for (let i = 0; i < Object.keys(map).length; i++) {
    invertedMap[values[i]] = keys[i];
  }
  return invertedMap;
};

/**
 * abstracting away the wp data
 * @param path 
 * @returns 
 */
const useUri = (path: string) => {
  const { data } = useWPUri(path || "");
  console.log(data);
  const amplifiCampaignsDisplayData = useMemo<{
    title: string;
    content: string;
    loading: boolean;
    error: any;
  }>(() => getDisplayData(data), [data]);
  return {
    amplifiCampaignsDisplayData,
    useCampaignACFsInstead: !data || data.errors,
    loading: amplifiCampaignsDisplayData.loading,
  };
};

const getCampaignRoute = (protocolID: string, campaignID: string) => {
  return "/campaigns/" + protocolID + "/" + campaignID;
};

export const useCampaignUri = (
  protocolID: string,
  campaignID: string,
  routeToUriMap: any
) => {
  const campaignUri = useMemo(
    () => routeToUriMap[getCampaignRoute(protocolID, campaignID)],
    [protocolID, campaignID, routeToUriMap]
  );
  return campaignUri;
};

export const isTabRoute = (routeForTab?: string) => {
  if (!routeForTab) return false;
  return routeForTab.split("/").length - 1 == 4;
};

export const getTabUri = (
  routeForTab?: string,
  routeToUriMap?: any,
  amplifiCampaignsTabData?: TabsData[]
) => {
  console.log(routeForTab, routeToUriMap, amplifiCampaignsTabData);
  if (
    routeForTab &&
    routeToUriMap &&
    routeToUriMap[routeForTab] &&
    isTabRoute(routeForTab)
  ) {
    return routeToUriMap[routeForTab];
  }
  if (amplifiCampaignsTabData && amplifiCampaignsTabData[0]) {
    return amplifiCampaignsTabData[0].uri;
  }
  return "";
};

/**
 * This is the root of all of the ampliFi campaign processed data should be 
 * @param protocolID 
 * @param routeForTab 
 * @param campaignID 
 * @returns 
 */
export const useCampaign = (
  protocolID: string,
  routeForTab?: string,
  campaignID?: string
) => {
  const { posts, nav } = useWPNav();
  const amplifiCampaigns = useMemo<PageData[] | null>(
    () => getAmplifiCampaigns(protocolID, posts),
    [posts, protocolID]
  );
  const uriToRouteMap = useMemo<UriToRouteMap>(
    () => generateWpUriToRouteMap(protocolID, nav),
    [protocolID, nav]
  );
  const routeToUriMap = useMemo(
    () => generateRouteToWpUriMap(protocolID, nav),
    [protocolID, nav]
  );

  const campaignUri = useCampaignUri(
    protocolID,
    campaignID || "",
    routeToUriMap
  );
  const amplifiCampaignsTabData = useMemo<TabsData[]>(
    () => getAmplifiCampaignTabsData(protocolID, campaignUri, posts),
    [protocolID, campaignUri, posts]
  ); //todo: Needs to get the tabs for a SPECIFIC CAMPAIGN
  const tabUri = useMemo(
    () => getTabUri(routeForTab, routeToUriMap, amplifiCampaignsTabData),
    [routeForTab, routeToUriMap, amplifiCampaignsTabData]
  );
  const {
    amplifiCampaignsDisplayData: data,
    useCampaignACFsInstead,
    loading: loadingPageData,
  } = useUri(tabUri);

  return {
    amplifiCampaigns,
    amplifiCampaignsTabData,
    getCampaignRoute,
    uriToRouteMap,
    routeToUriMap,
    page: {
      tabUri,
      useCampaignACFsInstead, //for the overview tab
      data,
      loadingPageData,
    },
  };
};
